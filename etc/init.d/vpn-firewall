#! /bin/bash
### BEGIN INIT INFO
# Provides:          vpnfirewall
# Required-Start:    mountkernfs $local_fs $remote_fs $syslog
# Required-Stop:     remote_fs
# X-Start-Before:    networking
# X-Stop-After:      networking
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: VPN Firewall
# Description:       Ensures no traffic is send, once OpenVPN breaks down for some reason.
### END INIT INFO

# Author: adrelanos <adrelanos at riseup dot net>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Ensures no traffic is send, once OpenVPN breaks down for some reason."
NAME=vpnfirewall
DAEMON=/usr/bin/$NAME
#DAEMON_ARGS="--options args"
PIDFILE=/var/run/$NAME/pid
SCRIPTNAME=/etc/init.d/$NAME
SUCCESSFILE=/var/run/$NAME/success
FAILFILE=/var/run/$NAME/fail

if [ ! -d /var/run/$NAME/ ]; then
   mkdir -p /var/run/$NAME/
fi

# Read configuration variable file if it is present
#[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

do_start()
{
   $DAEMON
   ret="$?"
   if [ "$ret" = "0" ]; then
      touch /var/run/$NAME/success
      return 0
   else
      touch /var/run/$NAME/fail
      return 2
   fi
}

do_stop()
{
   if [ -e /var/run/$NAME/fail ]; then
      rm /var/run/$NAME/fail
   fi
   if [ -e /var/run/$NAME/success ]; then
      rm /var/run/$NAME/success
   fi
   if [ -e /var/run/$NAME/success ]; then
      rm /var/run/$NAME/success
   fi
   return 0
}

do_status() {
   if [ -e /var/run/$NAME/fail ]; then
      return 1
   elif [ -e /var/run/$NAME/success ]; then
      return 0
   else
      return 1
   fi
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	do_status
	exit "$?"
	;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
